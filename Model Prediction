train_X = data.iloc[:2987, :]
train_y = data['loan_status'].iloc[:2987]

from sklearn.model_selection import train_test_split
train_X, test_X, train_y, test_y = train_test_split(train_X, train_y, random_state=0)

train_X.head()

test_X.head()

from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.model_selection import cross_val_score
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import GradientBoostingClassifier

# Categorical and numerical columns
categorical_columns = ['education', 'self_employed', 'marital_status', 'Gender']
numerical_columns = ['no_of_dependents', 'income_annum', 'loan_amount', 'loan_term',
                     'cibil_score', 'residential_assets_value', 'bank_asset_value']

# Preprocessing pipeline
preprocessor = ColumnTransformer(
    transformers=[
        ('cat', OneHotEncoder(), categorical_columns)
    ],
    remainder='passthrough'
)
# Random Forest
rf_pipeline = Pipeline([
    ('preprocessor', preprocessor),
    ('classifier', RandomForestClassifier())
])

rf_scores = cross_val_score(rf_pipeline, train_X, train_y, cv=5)
print('Random Forest: The accuracy of classification is %.2f%%' % (rf_scores.mean() * 100))

# Logistic Regression
logistic_pipeline = Pipeline([
    ('preprocessor', preprocessor),
    ('classifier', LogisticRegression())
])

logistic_scores = cross_val_score(logistic_pipeline, train_X, train_y, cv=5)
print('Logistic Regression: The accuracy of classification is %.2f%%' % (logistic_scores.mean() * 100))

# K-Nearest Neighbors (KNN)
knn_pipeline = Pipeline([
    ('preprocessor', preprocessor),
    ('classifier', KNeighborsClassifier())
])
knn_scores = cross_val_score(knn_pipeline, train_X, train_y, cv=5)
print('KNN: The accuracy of classification is %.2f%%' % (knn_scores.mean() * 100))

# Gradient Boosting Classifier2
gb_pipeline = Pipeline([
    ('preprocessor', preprocessor),
    ('classifier', GradientBoostingClassifier())
])

gb_scores = cross_val_score(gb_pipeline, train_X, train_y, cv=5)
print('Gradient Boosting Classifier: The accuracy of classification is %.2f%%' % (gb_scores.mean() * 100))

from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report

GB=GradientBoostingClassifier()
GB.fit(train_X,train_y)
pred=GB.predict(test_X)
print("Model Accuracy: ",accuracy_score(test_y,pred))
print(confusion_matrix(test_y,pred))
print(classification_report(test_y,pred))

